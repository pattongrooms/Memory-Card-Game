// my array with objects
//Each object has a `name` and an `img` property specifying the name and image source of the card.

const memoryCards = [
  {
    name: 'earth',
    img: 'images/earth_IMG.jpeg'
  },
  {
    name: 'saturn',
    img: 'images/saturn_IMG.jpeg'
  },
  {
    name: 'astronaut',
    img: 'images/astronaut_IMG.jpeg'
  },
  {
    name: 'jupiter',
    img: 'images/jupiter_IMG.jpeg'
  },
  {
    name: 'nasa',
    img: 'images/nasa_IMG.png'
  },
  {
    name: 'moon',
    img: 'images/moon_IMG.webp'
  },
  {
    name: 'earth',
    img: 'images/earth_IMG.jpeg'
  },
  {
    name: 'saturn',
    img: 'images/saturn_IMG.jpeg'
  },
  {
    name: 'astronaut',
    img: 'images/astronaut_IMG.jpeg'
  },
  {
    name: 'jupiter',
    img: 'images/jupiter_IMG.jpeg'
  },
  {
    name: 'nasa',
    img: 'images/nasa_IMG.png'
  },
  {
    name: 'moon',
    img: 'images/moon_IMG.webp'
  }
]

// 'memoryCards' array is sorted w/ sort method and comparison function

// comparison function randomly shuffles elements in array by subtracting a random value b/w 0 and 1 (generated by 'Math.random()')

memoryCards.sort(() => 0.5 - Math.random()) //shortcut to randomize array

//variables referenced to HTML elements 'container' and 'result'
const containerVisual = document.querySelector('#container')
const resultVisual = document.querySelector('#result')

//declared empty arrays
//keeps track of cards clicked by user, their corresponding IDs, and card matches
let cardsClicked = []
let cardsClickedIds = []
const cardsWon = []

//function used to create the HTML representation of game
//loops through the `memoryCards` array and creates `<img>` elements for each card

//created elements are assigned the 'images/space_IMG.jpeg' image source, a `data-id` attribute corresponding to the index of the card in the array, and an event listener for the 'click' event that invokes the `flipCard()` function

buildBoard()

function buildBoard() {
  for (let i = 0; i < memoryCards.length; i++) {
    const card = document.createElement('img')
    card.setAttribute('src', 'images/space_IMG.jpeg')
    card.setAttribute('data-id', i)
    card.addEventListener('click', flipCard)
    containerVisual.appendChild(card)
  }
}

//match funtion defined
//responsible for checking if two clicked cards match or not

//selects all the `<img>` elements on the page and retrieves the IDs of the two clicked cards from the `cardsClickedIds` array

function seeMatch() {
  const cards = document.querySelectorAll('img')
  const selectOneId = cardsClickedIds[0]
  const selectTwoId = cardsClickedIds[1]

  //If the IDs of the two cards are the same, player clicked the same card twice
  //function sets the image sources of both cards to 'images/space_IMG.jpeg' (effectively flipping them back over)
  //displays an alert indicating that the same image was clicked

  if (selectOneId == selectTwoId) {
    cards[selectOneId].setAttribute('src', 'images/space_IMG.jpeg')
    cards[selectTwoId].setAttribute('src', 'images/space_IMG.jpeg')
    alert('You have clicked the same image!')
  }

  //If the names of the two clicked cards match, found matching pair!
  //function sets the image sources of both cards to 'images/blank_IMG.png', indicating that they have been removed from the game
  //the 'click' event listeners for these cards are removed to prevent further interaction
  //matched cards are added to the `cardsWon` array

  if (cardsClicked[0] == cardsClicked[1]) {
    alert('Interstellar Match!')

    cards[selectOneId].setAttribute('src', 'images/blank_IMG.png')
    cards[selectTwoId].setAttribute('src', 'images/blank_IMG.png')
    cards[selectOneId].removeEventListener('click', flipCard)
    cards[selectTwoId].removeEventListener('click', flipCard)
    cardsWon.push(cardsClicked)

    //If the names of the two clicked cards do not match, user is unsuccessful
    //function sets the image sources of both cards to 'images/space_IMG.jpeg' (flipping them back over)
    //displays an alert indicating a failed attempt
  } else {
    cards[selectOneId].setAttribute('src', 'images/space_IMG.jpeg')
    cards[selectTwoId].setAttribute('src', 'images/space_IMG.jpeg')
    alert('Lost In Space Try Again!')
  }

  // The number of cards won (the length of the `cardsWon` array) is displayed in the `resultVisual` element
  //The `cardsClicked` and `cardsClickedIds` arrays are reset to empty

  resultVisual.textContent = cardsWon.length
  cardsClicked = []
  cardsClickedIds = []

  //If all the cards have been matched (the length of the `cardsWon` array is equal to half the length of the `memoryCards` array)
  //a congratulations message is displayed in the `resultVisual` element

  if (cardsWon.length == memoryCards.length / 2) {
    // alert('Win! Returning to Earth')
    resultVisual.textContent = 'Congratulations Returning to Earth!'
  }
}

//The `flipCard()` function is defined
//It is invoked when a card is clicked
//retrieves the `data-id` attribute of the clicked card to determine its index in the `memoryCards` array
//The name and ID of the card are added to the `cardsClicked` and `cardsClickedIds` arrays
//The image source of the clicked card is set to the corresponding `img` value from the `memoryCards` array
//If two cards have been clicked, the `seeMatch()` function is called after a delay of 500 milliseconds

function flipCard() {
  const cardId = this.getAttribute('data-id') //this key allows to interact with clicked img
  cardsClicked.push(memoryCards[cardId].name)
  cardsClickedIds.push(cardId)
  this.setAttribute('src', memoryCards[cardId].img)
  if (cardsClicked.length === 2) {
    setTimeout(seeMatch, 500)
  }
}
function resetBoard() {
  cardsClicked = []
  cardsClickedIds = []
  cardsWon.length = 0
  resultVisual.textContent = 0
  containerVisual.innerHTML = ''
  buildBoard()
}

const resetButton = document.querySelector('#resetButton')
resetButton.addEventListener('click', resetBoard)
